process {
  // memory amounts are total (per job)

  withLabel: fondue { 
    cpus = 1
    memory = 4.GB * params.overall_mem_scale
    time = { 4.h * params.overall_time_scale * task.attempt }
    clusterOptions = "--tmp=100G"
  }
  
  withLabel: readSimulation {
    cpus = Math.max(1, (8 * params.overall_cpu_scale * params.cpu_intensive_task_multiplier).round().intValue())
    memory = 8.GB * params.overall_mem_scale
    time = { 4.h * params.overall_time_scale * task.attempt }
  }

  withLabel: fastp {
    cpus = 1
    memory = { (6.GB * params.overall_mem_scale) * task.attempt }
    time = { 1.h * params.overall_time_scale * task.attempt }
  }

  withLabel: sampleFiltering {
    cpus = Math.max(1, (1 * params.overall_cpu_scale).round().intValue())
    memory = { 4.GB * task.attempt }
    time = { 6.h * params.overall_time_scale * task.attempt }
  }
  
  withLabel: hostRemoval {
    cpus = Math.max(1, (4 * params.overall_cpu_scale * params.cpu_intensive_task_multiplier).round().intValue())
    memory = { 8.GB * params.overall_mem_scale * task.attempt }
    time = { 2.h * params.overall_time_scale * task.attempt }
  }

  withLabel: readSubsampling {
    cpus = Math.max(1, (1 * params.overall_cpu_scale).round().intValue())
    memory = { 2.GB * task.attempt }
    time = { 4.h * params.overall_time_scale * task.attempt }
  }

  withLabel: genomeAssembly {
    cpus = Math.max(1, (4 * params.overall_cpu_scale).round().intValue())
    memory = { 12.GB * params.overall_mem_scale * params.mem_intensive_task_multiplier * task.attempt }
    time = { 6.h * params.overall_time_scale * task.attempt }
  }
  
  withLabel: contigEvaluation {
    cpus = Math.max(1, (24 * params.overall_cpu_scale * params.cpu_intensive_task_multiplier).round().intValue())
    memory = { 24.GB * params.overall_mem_scale * task.attempt }
    time = { 96.h * params.overall_time_scale * task.attempt }
  }

  withLabel: indexing {
    cpus = 1
    memory = { 3.GB * params.overall_mem_scale * task.attempt }
    time = { 2.h * params.overall_time_scale * task.attempt }
  }

  withLabel: readMapping {
    cpus = Math.max(1, (4 * params.overall_cpu_scale * params.cpu_intensive_task_multiplier).round().intValue())
    memory = { 16.GB * params.overall_mem_scale * params.mem_intensive_task_multiplier * task.attempt }
    time = { 6.h * params.overall_time_scale * task.attempt }
  }
  
  withLabel: contigBinning {
    cpus = Math.max(1, (2 * params.overall_cpu_scale).round().intValue())
    memory = { 3.GB * params.overall_mem_scale * task.attempt }
    time = { 4.h * params.overall_time_scale * task.attempt }
  }

  withLabel: checkm {
    cpus = Math.max(1, (6 * params.overall_cpu_scale).round().intValue())
    memory = { 8.GB * params.overall_mem_scale * task.attempt }
    time = { (6.h * params.overall_time_scale) * task.attempt }
  }
  
  withLabel: busco {
    cpus = Math.max(1, (4 * params.overall_cpu_scale * params.cpu_intensive_task_multiplier).round().intValue())
    memory = { 3.GB * params.overall_mem_scale * task.attempt }
    time = { 4.h * params.overall_time_scale * task.attempt }
  }
  
  withLabel: dereplication {
    cpus = 1
    memory = { 8.GB * params.overall_mem_scale * params.mem_intensive_task_multiplier * task.attempt }
    time = { 4.h * params.overall_time_scale * task.attempt }
  }
  
  withLabel: abundanceEstimation {
    cpus = Math.max(1, (4 * params.overall_cpu_scale).round().intValue())
    memory = { 16.GB * params.overall_mem_scale * task.attempt }
    time = { 6.h * params.overall_time_scale * task.attempt }
  }

  withLabel: taxonomicClassification { 
    cpus = Math.max(1, (4 * params.overall_cpu_scale * params.cpu_intensive_task_multiplier).round().intValue())
    memory = { 20.GB * params.overall_mem_scale * task.attempt }
    time = { 4.h * params.overall_time_scale * task.attempt }
  }

  withLabel: orthologSearch { 
    cpus = Math.max(1, (12 * params.overall_cpu_scale * params.cpu_intensive_task_multiplier).round().intValue())
    memory = 10.GB
    time = { 24.h * params.overall_time_scale * task.attempt }
  }

  withLabel: functionalAnnotation { 
    cpus = Math.max(1, (4 * params.overall_cpu_scale).round().intValue())
    memory = 48.GB
    time = { 24.h * params.overall_time_scale * task.attempt }
  }

  withLabel: collation { 
    cpus = Math.max(1, (1 * params.overall_cpu_scale).round().intValue())
    memory = { 12.GB * params.overall_mem_scale * params.mem_intensive_task_multiplier * task.attempt }
    time = { 24.h * params.overall_time_scale * task.attempt }
  }

  withLabel: needsInternet {
      module  = params.internetModule
  }

}
