params {
  condaEnvPath = ''
  cpus = 2
  readCount = 200000
  nGenomes = 2
  sampleCount = 2
  sampleNames = (1..params.sampleCount).toList().collect { i -> "sample${i}"}.join(' ')
  sampleGenomes = 'sample-genomes.qza'
  sampleLoci = 'sample-loci.qza'
  sampleProteins = 'sample-proteins.qza'
  sampleTaxonomy = 'sample-taxonomy.qza'
  taxon = 'Mycobacterium'
  filesReads = 'paired-end.qza'
  filesContigs = 'paired-end-contigs.qza'
  filesIndex = 'paired-end-index.qza'
  filesAlnMap = 'paired-end-bowtie-map-contigs.qza'
  filesMags = 'paired-end-mags.qza'
  filesBinQCViz = 'paired-end-bins-qc.qzv'
  filesBinTaxonomy = 'paired-end-bins-taxonomy.qza'
  filesBinTable = 'paired-end-bins-table.qza'
  filesBinKrakenReports = 'paired-end-bins-kraken-reports.qza'
  filesBinKrakenOutputs = 'paired-end-bins-kraken-outputs.qza'
  filesBinKrakenBarplots = 'paired-end-bins-kraken.qzv'
  filesReadsTable = 'paired-end-reads-table.qza'
  filesReadsKrakenReports = 'paired-end-reads-kraken-reports.qza'
  filesReadsKrakenOutputs = 'paired-end-reads-kraken-outputs.qza'
  filesReadsKrakenBarplots = 'paired-end-reads-kraken.qzv'
  checkmDBpath = ''
  kraken2DBpath = ''
  storeDir = ''
  imageTag = ''
  email = ''
  filesAccessionIds = ''
  filesSingleEndSeqs = 'single-end-seqs.qza'
  filesPairedEndSeqs = 'paired-end-seqs.qza'
  filesFailedRuns = 'failed-runs.qza'
  tempDir = ''
  paired = false
  assembler = 'megahit'
  cacheLocation = ''
  additionalRunOptions = ''
  binningQC = false
}

tower {
  endpoint = 'http://localhost:9000/api'
  enabled = false
}

profiles {
  conda {
    process.conda = params.condaEnvPath
  }

  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    singularity.runOptions = "-B ${params.cacheLocation}:/cache ${params.additionalRunOptions}"
    process.container = params.imageTag
    if (params.tempDir) {
        singularity.temp = params.tempDir
    }
  }

  docker {
    docker.enabled = true
    docker.runOptions = "-v ${params.cacheLocation}:/cache ${params.additionalRunOptions}"
    process.container = params.imageTag
    if (params.tempDir) {
        docker.temp = params.tempDir
    }
  }
}
