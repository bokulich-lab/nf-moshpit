params {
  condaEnvPath                      = ""
  condaEnvPathFondue                = ""
  imageTag                          = ""
  email                             = ""
  executor                          = "slurm"
  storeDir                          = ""
  traceDir                          = ""
  tempDir                           = ""
  dockerCacheDir                    = ""
  q2cacheDir                        = ""
  q2cacheDirExists                  = "error"
  singularityCacheDir               = "$SCRATCH/singularity_cache"
  additionalRunOptionsSingularity   = "-B $WORK/_data:/_data -B $WORK/tmp:/tmp -B $WORK -H $SCRATCH/tmp_home:/home/qiime2 -B $HOME:$HOME"
  additionalRunOptionsDocker        = ""
  inputReads                        = ""

  fondue {
    cpus                            = 24
    memoryPerCPU                    = "2GB"
    clusterOptions                  = ""
    paired                          = true
    filesAccessionIds               = ""
    time                            = 24.h
  }

  read_qc {
    n_reads                         = 10000
    time                            = 4.h
    memoryPerCPU                    = "2GB"
    clusterOptions                  = ""
  }

  read_trimming {
    enabled                         = false
    paired                          = true
    adapter_f                       = ""
    front_f                         = ""
    anywhere_f                      = ""
    adapter_r                       = ""
    front_r                         = ""
    anywhere_r                      = ""
    error_rate                      = 0.1
    indels                          = true
    times                           = 1
    overlap                         = 3
    match_read_wildcards            = false
    match_adapter_wildcards         = true
    minimum_length                  = 1
    discard_untrimmed               = false
    max_expected_errors             = 0
    max_n                           = 0
    quality_cutoff_5end             = 0
    quality_cutoff_3end             = 0
    quality_base                    = 33
    cpus                            = 24
    memoryPerCPU                    = "2GB"
    time                            = 4.h
  }

  host_removal {
    enabled                         = true
    cpus                            = 24
    memoryPerCPU                    = "500MB"
    clusterOptions                  = ""
    time                            = 12.h
    database                        = ""
    mode                            = "local"
    sensitivity                     = "sensitive"
    ref_gap_open_penalty            = 5
    ref_gap_ext_penalty             = 3
    exclude_seqs                    = true
  }

  read_simulation {
    cpus                            = 48
    memoryPerCPU                    = "1000MB"
    clusterOptions                  = ""
    sampleCount                     = 2
    seed                            = 100
    nGenomes                        = 3
    readCount                       = 1000000
    abundance                       = "uniform"
    gc_bias                         = true
    sampleGenomes                   = ""
    sampleNames                     = (1..params.read_simulation.sampleCount).toList().collect { i -> "sample${i}"}.join(' ')
    taxon                           = ""
    time                            = 3.h
  }

  read_subsampling {
    enabled                         = false
    paired                          = true
    time                            = 1.h
    fraction                        = 0.8
  }

  genome_assembly {
    enabled                         = true
    cpus                            = 48
    memoryPerCPU                    = "1GB"
    clusterOptions                  = ""
    assembler                       = "megahit"
    time                            = 48.h
    clusterOptions                  = ""
    megahit {
      presets                       = "meta-sensitive"
      kList                         = "21 29 39 59 79 99 119 141"
      minContigLen                  = 200
      additionalFlags               = ""
    }
    spades {
      k                             = "auto"
      debug                         = false
      covCutoff                     = "off"
      additionalFlags               = "--p-meta"
    }
  }

  assembly_qc {
    enabled                         = true
    useReads                        = false
    cpus                            = 32
    memoryPerCPU                    = "500MB"
    clusterOptions                  = ""
    time                            = 24.h
  }

  contig_indexing {
    cpus                            = 24
    memoryPerCPU                    = "2GB"
    clusterOptions                  = ""
    time                            = 12.h
  }

  read_mapping {
    cpus                            = 24
    memoryPerCPU                    = "1GB"
    clusterOptions                  = ""
    time                            = 12.h
  }

  dereplication {
    memoryPerCPU                    = "1GB"
    clusterOptions                  = ""
    time                            = 1.h
    threshold                       = 0.99
    sourmash {
      memoryPerCPU                  = "1GB"
      clusterOptions                = ""
      time                          = 12.h
      ksizes                        = 35
      scaled                        = 100
      trackAbundance                = true
    }
  }

  taxonomic_classification {
    enabled                         = true
    cpus                            = 20
    memoryPerCPU                    = "1GB"
    clusterOptions                  = ""
    kraken2DBpath                   = ""
    kraken2MemoryMapping            = true
    additionalFlags                 = ""
    time                            = 24.h
    bracken {
      enabled                       = true
      clusterOptions                = ""
      time                          = 12.h
      brackenDBpath                 = ""
      threshold                     = 0
      readLength                    = 100
      level                         = "S"
    }
    feature_selection {
      coverageThreshold             = 0.1
    }
  }

  functional_annotation {
    enabled                         = true
    ortholog_search {
      cpus                          = 64
      memoryPerCPU                  = "1GB"
      clusterOptions                = ""
      time                          = 48.h
      diamondDBpath                 = "
      dbInMemory                    = true
      additionalFlags               = ""
    }
    annotation {
      memoryPerCPU                  = "48GB"
      clusterOptions                = ""
      time                          = 12.h
      eggnogDBpath                  = ""
      dbInMemory                    = true
      additionalFlags               = ""
    }
  }

  binning {
    enabled                         = true
    cpus                            = 24
    memoryPerCPU                    = "1500MB"
    clusterOptions                  = ""
    time                            = 6.h
  }

  binning_qc {
    checkm {
      enabled                       = false
      cpus                          = 16
      memoryPerCPU                  = "1GB"
      clusterOptions                = ""
      pplacerThreads                = 16
      DBpath                        = ""
      reducedTree                   = true
      time                          = 12.h
    }
    busco {
      enabled                       = true
      cpus                          = 16
      memoryPerCPU                  = "1GB"
      clusterOptions                = ""
      time                          = 12.h
      mode                          = "genome"
      lineageDataset                = "bacteria_odb10"
      additionalFlags               = ""
    }
  }

}

env {}

def timestamp = new java.util.Date().format( 'yyyyMMddHHmmss' )
trace {
    enabled                     = true
    file                        = "${params.traceDir}/${timestamp}_trace.txt"
}
timeline {
    enabled                     = true
    file                        = "${params.traceDir}/${timestamp}_timeline.html"
}
report {
    enabled                     = true
    file                        = "${params.traceDir}/${timestamp}_report.html"
}
dag {
    enabled                     = false
    file                        = "${params.traceDir}/${timestamp}_dag.svg"
}

profiles {
  conda {
    process.conda               = params.condaEnvPath
    if (params.executor) {
        process.executor        = params.executor
    }
  }

  singularity {
    singularity.enabled         = true
    singularity.autoMounts      = false
    singularity.engineOptions   = "--debug"
    singularity.runOptions      = "${params.additionalRunOptionsSingularity}"
    singularity.envWhitelist    = "http_proxy,https_proxy,ftp_proxy"
    singularity.cacheDir        = params.singularityCacheDir
    process.container           = params.imageTag
    if (params.tempDir) {
        singularity.temp        = params.tempDir
    }
    if (params.executor) {
        process.executor        = params.executor
    }
  }

  docker {
    docker.enabled              = true
    docker.runOptions           = "-v ${params.dockerCacheDir}:/cache ${params.additionalRunOptionsDocker}"
    process.container           = params.imageTag
    if (params.tempDir) {
        docker.temp             = params.tempDir
    }
    if (params.executor) {
        process.executor        = params.executor
    }
  }
}

tower {
  accessToken                   = ''
  endpoint                      = ''
  enabled                       = false
}
