params {
  
  condaEnvPath = ""
  imageTag = ""
  email = ""
  executor = ""
  storeDir = ""
  tempDir = ""
  cacheLocation = ""
  additionalRunOptionsSingularity = ""
  additionalRunOptionsDocker = ""

  fondue {
    cpus = 1
    paired = true
    filesAccessionIds = ""
    time = 4.h
  }

  read_simulation {
    cpus = 1
    sampleCount = 1
    nGenomes = 2
    readCount = 200000
    sampleGenomes = ""
    sampleNames = (1..params.read_simulation.sampleCount).toList().collect { i -> "sample${i}"}.join(' ')
    taxon = ""
    time = 4.h
  }

  genome_assembly {
    cpus = 1
    assembler = "megahit"
    time = 4.h
  }

  assembly_qc {
    cpus = 1
    time = 4.h
  }

  contig_indexing {
    cpus = 1
    time = 4.h
  }

  read_mapping {
    cpus = 1
    time = 4.h
  }

  taxonomic_classification {
    cpus = 1
    kraken2DBpath = ""
    kraken2MemoryMapping = true
    time = 4.h
  }

  binning {
    cpus = 1
    time = 4.h
  }

  binning_qc {
    enabled = false
    cpus = 1
    memory = 16.GB
    pplacerThreads = 1
    checkmDBpath = ""
    checkmReducedTree = true
    time = 4.h
  }

}

profiles {
  conda {
    process.conda = params.condaEnvPath
    if (params.executor) {
        process.executor = params.executor
    }
  }

  singularity {
    singularity.enabled = true
    singularity.autoMounts = false
    singularity.engineOptions = ""
    singularity.runOptions = "${params.additionalRunOptionsSingularity}"
    singularity.envWhitelist = "http_proxy,https_proxy,ftp_proxy"
    process.container = params.imageTag
    if (params.tempDir) {
        singularity.temp = params.tempDir
    }
    if (params.executor) {
        process.executor = params.executor
    }
  }

  docker {
    docker.enabled = true
    docker.runOptions = "-v ${params.cacheLocation}:/cache ${params.additionalRunOptionsDocker}"
    process.container = params.imageTag
    if (params.tempDir) {
        docker.temp = params.tempDir
    }
    if (params.executor) {
        process.executor = params.executor
    }
  }
}
